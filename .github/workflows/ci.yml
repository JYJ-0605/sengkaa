name: CI/CD for React and Django

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소 클론
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # React LTS 버전

      - name: Install React dependencies
        run: npm install --legacy-peer-deps

      - name: Set homepage for deployment
        run: |
          if grep -q '"homepage":' package.json; then
            sed -i 's|"homepage": "[^"]*"|"homepage": "/frontend_static"|' package.json
          else
            sed -i '2i\  "homepage": "/frontend_static",' package.json
          fi

      - name: Build React project
        run: |
          export CI=false
          npm run build

      ## --------------- Django Backend 설정 ---------------
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9.21 # Django 지원 버전

      - name: Install Django dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Run Django migrations
        run: |
          source venv/bin/activate

      - name: Upload React build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 👉 build 완료 후 실행
    steps:

      - name: Download React build artifacts
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: ./build

      - name: Deploy React to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./build/ ${EC2_USER}@${EC2_HOST}:/var/www/html

      - name: Clean Python Cache
        run: |
          find . -type d -name "__pycache__" -exec rm -r {} +
          find . -type f -name "*.pyc" -delete

      - name: Deploy Backend source to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" . ${EC2_USER}@${EC2_HOST}:/var/www/eventcafe-backend --exclude=node_modules --exclude=build --exclude=.git --exclude=venv

      - name: Create .env on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" > /var/www/eventcafe-backend/.env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> /var/www/eventcafe-backend/.env
            echo "IS_APP_ENV=true" >> /var/www/eventcafe-backend/.env  
          EOF

      - name: Run deploy.sh on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} 'bash /var/www/eventcafe-backend/deploy.sh'
